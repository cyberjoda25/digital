apiVersion: template.openshift.io/v1
kind: Template
metadata:
  annotations:
    description: OpenShift template
    tags: "instant-${APP_NAME},${APP_NAME}"
  name: ${APP_NAME}
parameters:
  - displayName: App name
    name: APP_NAME
    required: true
    value: ""
  - displayName: App version
    name: APP_VERSION
    required: true
    value: ""
  - name: AMBIENTE
    required: true
    value: ""
  - name: REGISTRY
    required: true
    value: ""
message: "App access URL: https://${APP_NAME}-${OPENSHIFT_NAMESPACE}-${AMBIENTE}.apps.din-ros-can-dev.9gqx.p1.openshiftapps.com"
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ${APP_NAME}
  name: ${APP_NAME}
spec:
  ports:
    - name: "${APP_NAME}-http"
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: "${APP_NAME}-grpc"
      port: 9000
      protocol: TCP
      targetPort: 9000
  selector:
    app: ${APP_NAME}
    deploymentconfig: ${APP_NAME}
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Route
metadata:
  annotations:
    description: Route http service.
  labels:
    app: ${APP_NAME}
  name: ${APP_NAME}
spec:
  port:
    targetPort: "${APP_NAME}-http"
  tls:
    termination: edge
  to:
    kind: Service
    name: ${APP_NAME}
---
apiVersion: v1
kind: DeploymentConfig
metadata:
  labels:
    app: ${APP_NAME}
    deploymentconfig: ${APP_NAME}
  name: ${APP_NAME}
spec:
  replicas: ${MIN_REPLICA}
  selector:
    app: ${APP_NAME}
    deploymentconfig: ${APP_NAME}
  strategy:
    resources:
      limits:
        cpu: ${CPU_LIM}
        memory: ${MEM_LIM}
      requests:
        cpu: ${CPU_REQ}
        memory: ${MEM_REQ}
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 0
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: Rolling
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: ${APP_NAME}
        deploymentconfig: ${APP_NAME}
      annotations:
        sidecar.istio.io/inject: "true"
    spec:${TEMPLATE_AMBIENTE_OPC}
      containers:
        - env:
            - name: APP_NAME
              value: "${APP_NAME}"
            - name: APP_VERSION
              value: "${APP_VERSION}"
            - name: AMBIENTE
              value: "${AMBIENTE}"
            - name: AS_400_GESTOR_URL
              valueFrom:
               configMapKeyRef:
                name: configuraciones-microservicios-conectores
                key: conector.as400.gestor.url
            - name: AS_400_GESTOR_TIMEOUT
              valueFrom:
               configMapKeyRef:
                name: configuraciones-microservicios-conectores
                key: conector.as400.gestor.timeout
            - name: CRIPTOGRAFIA_CANAL_PATH
              valueFrom:
               configMapKeyRef:
                name: criptografia-microservicios
                key: llaves.criptograficas.canal.ruta
            - name: CRIPTOGRAFIA_APLICACION_CANAL_PATH
              valueFrom:
               configMapKeyRef:
                name: criptografia-microservicios
                key: llaves.criptograficas.aplicacion.canal.ruta
            - name: MQ_HOST
              valueFrom:
               secretKeyRef:
                name: activemq
                key: host
            - name: MQ_USER
              valueFrom:
               secretKeyRef:
                name: activemq
                key: usuario
            - name: MQ_PASSWORD
              valueFrom:
               secretKeyRef:
                name: activemq
                key: clave
            - name: MQ_PORT
              valueFrom:
               secretKeyRef:
                name: activemq
                key: puerto
            - name: PATH_LOGS_MS_CONTINGENCIA
              valueFrom:
               configMapKeyRef:
                name: configuracion-logs
                key: microservicios.path.logs
            - name: FLAG_HEALTH_CHECK
              valueFrom:
               configMapKeyRef:
                name: ${APP_NAME_CONF}
                key: flag.healthcheck
            - name: RUTA_PATH_BSOCMS015
              valueFrom:
               configMapKeyRef:
                name: ${APP_NAME_CONF}
                key: as400.bsocms015.rutaPath
            - name: RUTA_PATH_SOCMS015
              valueFrom:
               configMapKeyRef:
                name: ${APP_NAME_CONF}
                key: as400.socms015.rutaPath
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              valueFrom:
               configMapKeyRef:
                name: opentelemetry
                key: host
            - name: OTEL_NAMESPACE
              valueFrom:
               configMapKeyRef:
                name: opentelemetry
                key: namespace
          image: "${REGISTRY}"
          imagePullPolicy: Always
          name: ${APP_NAME}
          ports:
            - containerPort: 8080
              protocol: TCP
            - containerPort: 9000
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: q/health/live
              port: 8080
            initialDelaySeconds: ${INITIAL_DELAY}
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: q/health/ready
              port: 8080
            initialDelaySeconds: ${INITIAL_DELAY}
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 5
          volumeMounts:
            - mountPath: "/var/llaves-criptograficas-canal/"
              name: llaves-criptograficas-canal
            - mountPath: "/var/llaves-criptograficas-aplicacion-canal/"
              name: llaves-criptograficas-aplicacion-canal
            - mountPath: "/var/opt/logs-ms/"
              name: path-microservicio-logs
          resources:
            limits:
              cpu: ${CPU_LIM}
              memory: ${MEM_LIM}
            requests:
              cpu: ${CPU_REQ}
              memory: ${MEM_REQ}
          terminationMessagePath: /dev/termination-log
      dnsPolicy: ClusterFirst
      volumes:
        - name: llaves-criptograficas-canal
          secret:
            secretName: administracion-llaves-canal
        - name: llaves-criptograficas-aplicacion-canal
          secret:
            secretName: administracion-llaves-aplicacion-canal
        - name: path-microservicio-logs
          emptyDir: {}
      restartPolicy: Always
      securityContext: {}
      terminationGracePeriodSeconds: 30
  triggers:
  - type: ConfigChange
---
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: ${APP_NAME}
spec:
  scaleTargetRef:
    apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    name: ${APP_NAME}
  minReplicas: ${MIN_REPLICA}
  maxReplicas: ${MAX_REPLICA}
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          averageUtilization: ${AVE_CPU}
          type: Utilization
    - type: Resource
      resource:
        name: memory
        target:
          averageUtilization: ${AVE_MEMORY}
          type: Utilization